quintugram_test <- test_gram(quintugram)
ngram_models <- list(quintugram_train,
tetragram_train,
trigram_train,
bigram_train,
unigram_train)
pred_data <- function(doc) {  ## doc = five_grams
a <- doc %>%
select(word) %>%
separate(word, into = paste0("x", 1:5), sep = " ")
b <- a %>%
select(- ncol(a))
b <- b %>% unite(predictors, 1:ncol(b), sep = " ")
return(b)
}
predict_data <- pred_data(quintugram_test)
view_prediction <- function(x, model) {
output <- vector("character")
x <- unlist(x)
x <- as.character(x)
for(i in seq_along(x)) {
output[i] <- predict_Backoff(x[[i]], model)
}
output
}
prediction <- view_prediction(predict_data)
prediction <- view_prediction(predict_data, ngram_models)
acc <- accuracy(quintugram_test, prediction)
accuracy <- function(test, prediction) { ## test is the fivegram_test data
## prediction is the result generated from the view_prediction()
d <- test %>% select(word) %>% separate(word, into = paste0("x", 1:5), sep = " ")
d <- d %>% select(ncol(d)) %>% unlist() %>% as.character()
mean(prediction == d)
}
acc <- accuracy(quintugram_test, prediction)
acc
prediction
test_string - "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
test_string <- "Guy at my table's wife got up to go to the bathroom and I asked about dessert and he started telling me about his"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "When you breathe, I want to be the air for you. I'll be there for you, I'd live and I'd"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "I'd give anything to see arctic monkeys this"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "Talking to your mom has the same effect as a hug and helps reduce your"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "When you were in Holland you were like 1 inch away from me but you hadn't time to take a"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "I'd just like all of these questions answered, a presentation of evidence, and a jury to settle the"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "I can't deal with unsymetrical things. I can't even hold an uneven number of bags of groceries in each"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "Every inch of you is perfect from the bottom to the"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "Iâ€™m thankful my childhood was filled with imagination and bruises from playing"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
test_string <- "I like how the same people are in almost all of Adam Sandler's"
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
predict_Backoff(test_string, ngram_models)
library(digest)
hel(package = digest)
help(package = digest)
library(learningr)
median(1, 2, 3, 4, 5)
median(c(1, 2, 3, 4, 5))
sum(1, 2, 3, 4, 5)
sum(c(1, 2, 3, 4, 5))
2**3
all.equal(sqrt(2) ^ 2, 2)
identical(sqrt(2) ^ 2, 2)
all.equal(sqrt(2) ^ 2, 3)
isTRUE(all.equal(sqrt(2) ^2, 3))
c("a", "b", "c", "d") < "C"
?make.names
a <- 2
mode(a)
a <- "c"
mode(c)
mode(a)
a <- TRUE
mode(a)
a <- 1L
a <- 1L
mode(a)
typeof(a)
storage.mode(a)
class(a)
.Machine
library(assertive)
ls(pattern "^as", baseenv())
ls(pattern = "^as", baseenv())
ls(pattern = "^as")
View(head(mtcars))
edit(head(mtcars))
a <- head(mtcars)
fix(a)
a
ls.str()
str(a)
ls(pattern = "^as", env())
ls(pattern = "^as", Globalenv())
ls(pattern = "^as", GlobalEnv())
ls(pattern = "^as", globalEnv())
ls(pattern = "^as", globalenv())
list(5)
vector(list, 5)
vector("list", 5)
character(5)
vector("character",5)
seq(3:12, )
seq(3:12, 1)
seq(3:12)
?seq
seq(3, 12, 1)
ls("^seq", baseenv())
ls("^as", baseenv())
ls(pattern = "^seq", baseenv())
recaman <- c(0, 1, 3, 6, 2, 7, 13, 20)
dim(recaman)
NCOL(recaman)
NROW(recaman)
nrow(recaman)
?row.names
?rownames
m0 <- matrix(NA, 4, 0)
rownames(m0)
m2 <- cbind(1, 1:4)
colnames(m2, do.NULL = FALSE)
m2
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "Obs.")
m2
rownames(m2) <- rownames(m2, do.NULL = FALSE)
m2
rownames(m2) <- rownames(m2, do.NULL = FALSE, prefix = "rows.")
m2
m2 <- cbind(1, 1:4)
rownames(m2) <- rownames(m2, do.NULL = FALSE)
m2
(prime_factors <- list(
two = 2,
three = 3,
four = c(2, 2),
five = 5,
six = c(2, 3),
seven = 7,
eight = c(2, 2, 2),
nine = c(3, 3),
ten = c(2, 5)
))
prime <- unlist(prime_factors)
prime
class(prime)
length(prime)
names(prime)
class(names(prime))
sd
sd
formals(sd)
a <- vector("numeric", 2)
a
class(a)
sd
subset
?subset
subset
subset(airquality, Day == 1, select = -Temp)
subset(airquality, Day == 1, select = -Temp, drop = TRUE)
a <- subset(airquality, Day == 1, select = -Temp)
b <- subset(airquality, Day == 1, select = -Temp, drop = TRUE)
class(a)
class(b)
identical(a, b)
an_environment <- new.env()
an_environment
an_environment[["pythag"]] <- c(12, 15, 20, 21) #See http://oeis.org/A156683
an_environment
class(an_environment)
?new.env
env.profile(an_environment)
an_environment$root <- polyroot(c(6, -5, 1))
an_environment
ls(globalenv())
ls(an_environment())
ls(an_environment
)
formals(rt)
args(rt)
formalArgs(rt)
body(rt)
rt
a <- head(mtcars)
b <- tail(mtcars)
c <- mtcars[sample(nrow(mtcars), 10), ]
library(tidyverse)
d <- bind_rows(a, b, c)
d
a <- select(head(mtcars, - hp))
a <- select(head(mtcars) - hp))
a <- select(head(mtcars), - hp))
a <- select(head(mtcars), -hp))
a <- select(head(mtcars), -hp)
a
b <- select(head(mtcars), c(disp, drat, mpg))
c <- select(head(mtcars), c(wt, qsec, vs))
d <- left_join(c(a, b, c), by = mpg)
d <- left_join(a, b, by = mpg)
a
b
?left_join
d <- left_join(a, b, by = "mpg")
d
d <- do.cal(left_join, list(a, b, c))
d <- do.call(left_join, list(a, b, c))
?do.call
ecdf
c(
"You should use double quotes most of the time",
'Single quotes are better for including " inside the string'
)
?formatC
?format
?sprintf
cat("foo \t bar")
cat("foo \t bar", fill = TRUE)
cat("foo \t bar")
?cat
cat("foo\tbar")
cat("foo \n bar")
cat("foo \nbar")
cat("\a")
cat("\a")
alarm()
?alarm
alarm()
path.expand("~")
?re
?Re
setwd("C:/Users/stbal/Desktop/field_posting")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("learningr", dependencies = TRUE)
library(gsci)
library(ggsci)
lapply(complemented, function(x) rep.int(4, times = x))
complemented <- c(2, 3, 6, 18) #See http://oeis.org/A000614
lapply(complemented, function(x) rep.int(4, times = x))
baby_gender_report <- function(gender)
{
switch(
gender,
male = "It's a boy!",
female = "It's a girl!",
"Um..."
)
}
genders <- c("male", "female", "other")
baby_gender_report(genders)
update.packages(ask = F, checkBuilt = TRUE)
setRepositories()
dim(available.packages())
dim(installed.packages())
library(zoo)
.leap.seconds
?.leap.seconds
Sys.timezone
Sys.timezone()
time()
time(x = sys.time())
time(x = Sys.time())
Sys.time()
Sys.timezone()
?Sys.timezone
OlsonNames()
Sys.getlocale()
Sys.getlocale("LC_TIME")
help(package = lubridate)
help(package = rvest)
help(package = rvest)
data()
data(package = .packages(all.available = TRUE))
help(package = learningr)
library(colbycol)
library(sqdlf)
library(sqldf)
?rev
help(package = XML)
"xml2"
help(package = xml2)
help(package = xml2)
list.fiels
list.files()
library(xml2)
?read_html
a <- read_html("milestone_report.html", encoding = "UTF-8")
View(a)
a
read_html(system.file("extdata", "r-project.html", package = "xml2"))
?data
?.packages
.packages()
.packages(all.available = TRUE)
tail(.packages(all.available = TRUE), 200)
library(xlsx)
?read.xlsx2
head(data(package = .packages(all.availa= TRUE)))
library(R.matlab)
a <- system.file(package = "ggplot2")
a
system.file()
R.home
R.home()
system.file()
a <- system.file(package = "ggplot2")
a
a <- system.file(package = "learningr", "exdata")
a
a <- system.file(package = "learningr", "extdata")
a
library(SEER2r)
library(SEER2R)
library(WDI)
wdi_search <- WDIsearch()
dim(wdi_search)
head(wdi_search)
View(wdi_search)
help(package = Rculr)
help(package = "RCurl")
help(package = httr)
library(DBI)
library(RSQLite)
library(RMySQL)
library(PostgreSQL)
library(ROracle)
library(RJDBC)
packages <- c("PostgreSQL", "ROracle", "RJDBC", "SEER2R")
install.packages(packages, dependencies = TRUE)
library(ROracle)
install.packages("ROracle", dependencies = TRUE)
install.packages("ROracle", dependencies = TRUE)
plot(1:25, pch = 1:25, bg = "blue")
plot(1:25, pch = 1:25)
plot(1:25, pch = 1:25, bg = "blue")
help(package = ggplot2)
names(mtcars)
library(ggplot2)
ggplot(mtcars, aes(~disp, ~hp)) + geom_point()
ggplot(mtcars, aes(disp, hp)) + geom_point()
set.seed(1)
runif(5)
runif(5)
set.seed(1)
runif(5)
data(gonorrhoea)
data(gonorrhoea, package = "learningr")
gonorrhoea
model1 <- lm(Rate ~ Year + Age.Group + Ethnicity + Gender, gonorrhoea)
model1
summary(model1)
model2 <- update(model1, ~., -Year)
summary(model2)
model2 <- update(model1, ~ . -Year)
summary(model2)
str(model2)
unclass(model2
)
getOption("warn")
last.warning
warnings()
to_convert <- list(
first = sapply(letters[1:5], charToRaw),
second = polyroot(c(1, 0, 0, 0, 1)),
third = list(x = 1:2, y = 3:5)
)
result <- try(lapply(to_convert, as.data.frame))
result <- try(lapply(to_convert, as.data.frame), silent = TRUE)
result
result <- try(lapply(to_convert, as.data.frame))
traceback()
outer_fn <- function(x) inner_fn(x)
inner_fn <- function(x) exp(x)
outer_fn(1)
outer_fn(list(1))
traceback()
inner_fn <- function(x)
{
browser() #execution pauses here
exp(x)
}
outer_fn(list(1))
ls.str
ls.str()
outer_fn(list(1))
debug(buggy_count)
library(learningr)
debug(buggy_count)
x <- factor(sample(c("male", "female"), 20, replace = TRUE))
buggy_count(x)
buggy_count(x)
q
q()
undebug()
undebug(buggy_count)
UseMethod
getMethod("print")
